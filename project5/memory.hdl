// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Load
    // Both bit 13 and bit 14 are set. Implies address >= 0x6000
    And(a=address[13], b=address[14], out=addrhigh);

    // Don't load if address > 0x5FFF
    Mux(a=load, b=false, sel=addrhigh, out=loadsel);

    // Load Screen if bit 14 is set
    // Load RAM if bit 14 is not set
    DMux(in=loadsel, sel=address[14], a=ramload, b=screenload);

    // The three memory blocks
    // 0x0000 -> 0x3FFF
	RAM16K(in=in, load=ramload, address=address[0..13], out=ramout);
    // 0x4000 -> 0x5FFF
    Screen(in=in, load=screenload, address=address[0..12], out=screenout);
    // 0x6000
    Keyboard(out=keyout);

    // Select output
    // Requirements for OUT
    // 1. RAM16K out if 0x0000 <= address <= 0x3FFF
    // 2. SCREEN out if 0x4000 <= address <= 0x5FFF
    // 3. KEYBOARD out if address == 0x6000
    // 4. 0 if address > 0x6000

    // How to proceed?
    // Are any bits in address [0..12] set and bits 13 and 14 are set?
    // If yes, address > 0x6000 and out should equal 0
    // If no and bits 13 and 14 are set, then address == 0x6000 and out == keyboard state
    // Otherwise out equals previously selected RAM or SCREEN memory

    // Check for 1 and 2
    // If bit 14 is set, bits 0..12 map directly to the 8K SCREEN memory
    // Otherwise, bit 0..13 map to the RAM
    Mux16(a=ramout, b=screenout, sel=address[14], out=ramorscreen);

    // Check for 4
    // Are any bits in address[0..12] set?
    Or8Way(in=address[0..7], out=addresslow);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=addresshigh);
    Or(a=addresslow, b=addresshigh, out=addressset);
    // Is address > 0x6000?
    And(a=addressset, b=addrhigh, out=outzero);

    // Check for 3
    // Is address == 0x6000? (outzero == 0 and bits 13 and 14 are set)
    Mux16(a=ramorscreen, b=keyout, sel=addrhigh, out=outtemp);
    Mux16(a=outtemp, b=false, sel=outzero, out=out);
}
